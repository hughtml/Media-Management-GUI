/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FraserHughpart3;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import java.io.*;

/**
 * A class to create and run a GUI for a Media Playlist System
 * @author Hugh Fraser 1600644
 * @version 1.0
 * Date Started: 13/1/2018
 * Date Completed: 21/1/2018
 */
public class MediaPlayListGUI extends javax.swing.JFrame {

    //-------------------- SYSTEM DATA --------------------
    
    User user;
    //Creating a field to store a User object
    PlayList myMedia;
    PlayList playing;
    //Creating fields to store PlayList objects
    
    JFileChooser fileChooser = new JFileChooser();
    //Creating a file chooser for when the user wants to load media
    int currentItemIndex = 0;
    //Creating a variable to store the current item (in the playing playlist) index
    
    /**
     * Constructor method for the GUI
     */
    public MediaPlayListGUI() {
        
        //---------- INITIALISATIONS ----------
        
        //----- GUI COMPONENTS -----
        
        initComponents();
        //Initiallising the GUI components
        //This is done through code generated by the NetBeans GUI Visual Editor
        
        //----- USER AND PLAYLISTS -----
        
        initUser();
        //Initialising the user
        updateTextFields();
        //Initialising the username and current balance text fields 
        initPlaylists();
        updatePlaylists();
        updateRuntime();
        //Initialising the playlists and reflecting the change in the interface
                
        //----- TEXT FIELDS NOT EDITABLE -----
        
        textFieldUsername.setEditable(false);
        textFieldYourCurrentBalance.setEditable(false);
        textFieldTotalRuntime.setEditable(false);
        //Making sure the user can't edit the text within the JTextFields
        
        //----- 'DO YOU REALLY WANT TO EXIT?' DIALOG -----
        
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        //Overriding the default closing option
        addWindowListener(new WindowAdapter() {
        //Adding a new windowlistner to catch when the user tries to close the window    
        //Using a WindowAdaoter to receive window events  
            /**
             * A method invoked when the window is in the process of being closed
             * @param e The window event
             */
            public void windowClosing(WindowEvent e) { 
                closeWindowActionPerformed();
                //Calling the action performed method
            }
        });

    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        panelMyMedia = new javax.swing.JPanel();
        labelMyMedia = new javax.swing.JLabel();
        buttonAddMusic = new javax.swing.JButton();
        labelWelcomeBack = new javax.swing.JLabel();
        labelYourCurrentBalance = new javax.swing.JLabel();
        labelMyMediaButtons = new javax.swing.JLabel();
        comboBoxMyMedia = new javax.swing.JComboBox<>();
        labelMyMediaDropDown = new javax.swing.JLabel();
        buttonAddEpisode = new javax.swing.JButton();
        buttonAddFilm = new javax.swing.JButton();
        textFieldUsername = new javax.swing.JTextField();
        textFieldYourCurrentBalance = new javax.swing.JTextField();
        panelCurrentPlaylist = new javax.swing.JPanel();
        labelCurrentPlaylist = new javax.swing.JLabel();
        labelCurrentPlaylistButtons = new javax.swing.JLabel();
        labelMediaImage = new javax.swing.JLabel();
        buttonAddImage = new javax.swing.JButton();
        buttonMoveUp = new javax.swing.JButton();
        buttonMoveDown = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        buttonShuffle = new javax.swing.JButton();
        labelTotalRuntime = new javax.swing.JLabel();
        textFieldTotalRuntime = new javax.swing.JTextField();
        scrollPaneListHolder = new javax.swing.JScrollPane();
        listCurrentPlaylist = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        menuUserMangement = new javax.swing.JMenu();
        menuItemLogin = new javax.swing.JMenuItem();
        menuItemLogout = new javax.swing.JMenuItem();
        menuItemManageMedia = new javax.swing.JMenuItem();
        menuFileManagement = new javax.swing.JMenu();
        menuItemLoadMedia = new javax.swing.JMenuItem();
        menuItemSaveMedia = new javax.swing.JMenuItem();
        menuSortMyMedia = new javax.swing.JMenu();
        menuItemByTitle = new javax.swing.JMenuItem();
        menuItemByCost = new javax.swing.JMenuItem();
        menuItemByDuration = new javax.swing.JMenuItem();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panelMyMedia.setBackground(new java.awt.Color(204, 204, 204));
        panelMyMedia.setMaximumSize(new java.awt.Dimension(300, 479));
        panelMyMedia.setMinimumSize(new java.awt.Dimension(300, 479));

        labelMyMedia.setText("My Media");

        buttonAddMusic.setText("Add Music");
        buttonAddMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddMusicActionPerformed(evt);
            }
        });

        labelWelcomeBack.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelWelcomeBack.setText("Welcome back,");

        labelYourCurrentBalance.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelYourCurrentBalance.setText("Your current balance is");

        labelMyMediaButtons.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelMyMediaButtons.setLabelFor(comboBoxMyMedia);
        labelMyMediaButtons.setText("<html>Alternatively, if you have a new media item, <br>add it using one of these buttons:</html>");

        comboBoxMyMedia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1" }));
        comboBoxMyMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMyMediaActionPerformed(evt);
            }
        });

        labelMyMediaDropDown.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelMyMediaDropDown.setLabelFor(comboBoxMyMedia);
        labelMyMediaDropDown.setText("<html>Use this drop down list to select a media<br>item to add it to the Current Playlist:</html>");

        buttonAddEpisode.setText("Add Episode");
        buttonAddEpisode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddEpisodeActionPerformed(evt);
            }
        });

        buttonAddFilm.setText("Add Film");
        buttonAddFilm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddFilmActionPerformed(evt);
            }
        });

        textFieldUsername.setMaximumSize(new java.awt.Dimension(6, 20));
        textFieldUsername.setName(""); // NOI18N

        textFieldYourCurrentBalance.setMaximumSize(new java.awt.Dimension(6, 20));
        textFieldYourCurrentBalance.setName(""); // NOI18N

        javax.swing.GroupLayout panelMyMediaLayout = new javax.swing.GroupLayout(panelMyMedia);
        panelMyMedia.setLayout(panelMyMediaLayout);
        panelMyMediaLayout.setHorizontalGroup(
            panelMyMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMyMediaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMyMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(buttonAddMusic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAddFilm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonAddEpisode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(101, 101, 101))
            .addGroup(panelMyMediaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMyMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMyMediaButtons)
                    .addComponent(comboBoxMyMedia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelMyMediaDropDown)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMyMediaLayout.createSequentialGroup()
                        .addComponent(labelMyMedia)
                        .addGap(65, 235, Short.MAX_VALUE))
                    .addGroup(panelMyMediaLayout.createSequentialGroup()
                        .addComponent(labelWelcomeBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelMyMediaLayout.createSequentialGroup()
                        .addComponent(labelYourCurrentBalance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldYourCurrentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelMyMediaLayout.setVerticalGroup(
            panelMyMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMyMediaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelMyMedia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMyMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelWelcomeBack)
                    .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMyMediaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelYourCurrentBalance)
                    .addComponent(textFieldYourCurrentBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(labelMyMediaDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboBoxMyMedia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelMyMediaButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonAddEpisode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonAddFilm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonAddMusic)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        labelCurrentPlaylist.setText("Current PlayList");

        labelCurrentPlaylistButtons.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        labelCurrentPlaylistButtons.setLabelFor(comboBoxMyMedia);
        labelCurrentPlaylistButtons.setText("<html>Use these buttons to move the<br>media in the Current Playlist around,<br>remove an item, or an add an image<br>to the current item:</html>");

        labelMediaImage.setText("No Image Found");

        buttonAddImage.setText("Add Image");
        buttonAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddImageActionPerformed(evt);
            }
        });

        buttonMoveUp.setText("Move Up");
        buttonMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMoveUpActionPerformed(evt);
            }
        });

        buttonMoveDown.setText("Move Down");
        buttonMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMoveDownActionPerformed(evt);
            }
        });

        buttonRemove.setText("Remove");
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        buttonShuffle.setText("Shuffle");
        buttonShuffle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShuffleActionPerformed(evt);
            }
        });

        labelTotalRuntime.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelTotalRuntime.setLabelFor(comboBoxMyMedia);
        labelTotalRuntime.setText("Total playlist runtime (H:M:S)");

        textFieldTotalRuntime.setText("                                    ");
        textFieldTotalRuntime.setMaximumSize(new java.awt.Dimension(114, 20));
        textFieldTotalRuntime.setMinimumSize(new java.awt.Dimension(114, 20));

        listCurrentPlaylist.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        listCurrentPlaylist.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCurrentPlaylistValueChanged(evt);
            }
        });
        scrollPaneListHolder.setViewportView(listCurrentPlaylist);

        javax.swing.GroupLayout panelCurrentPlaylistLayout = new javax.swing.GroupLayout(panelCurrentPlaylist);
        panelCurrentPlaylist.setLayout(panelCurrentPlaylistLayout);
        panelCurrentPlaylistLayout.setHorizontalGroup(
            panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCurrentPlaylistLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCurrentPlaylistLayout.createSequentialGroup()
                        .addComponent(scrollPaneListHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelCurrentPlaylistLayout.createSequentialGroup()
                        .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buttonAddImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelMediaImage)
                            .addComponent(labelCurrentPlaylist, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelCurrentPlaylistLayout.createSequentialGroup()
                                .addComponent(labelCurrentPlaylistButtons)
                                .addGap(63, 63, 63))
                            .addGroup(panelCurrentPlaylistLayout.createSequentialGroup()
                                .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonMoveDown)
                                    .addComponent(buttonMoveUp, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonShuffle, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64)
                                .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelTotalRuntime)
                                    .addComponent(textFieldTotalRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        panelCurrentPlaylistLayout.setVerticalGroup(
            panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCurrentPlaylistLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelCurrentPlaylist)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelMediaImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonRemove)
                        .addComponent(buttonMoveUp))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCurrentPlaylistLayout.createSequentialGroup()
                        .addComponent(labelCurrentPlaylistButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelTotalRuntime)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCurrentPlaylistLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddImage)
                    .addComponent(buttonMoveDown)
                    .addComponent(buttonShuffle)
                    .addComponent(textFieldTotalRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPaneListHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBar.setBackground(new java.awt.Color(0, 102, 102));

        menuUserMangement.setBackground(new java.awt.Color(0, 102, 102));
        menuUserMangement.setText("User Management");

        menuItemLogin.setText("Login");
        menuItemLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoginActionPerformed(evt);
            }
        });
        menuUserMangement.add(menuItemLogin);

        menuItemLogout.setText("Logout");
        menuItemLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLogoutActionPerformed(evt);
            }
        });
        menuUserMangement.add(menuItemLogout);

        menuItemManageMedia.setText("Manage Media");
        menuItemManageMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemManageMediaActionPerformed(evt);
            }
        });
        menuUserMangement.add(menuItemManageMedia);

        menuBar.add(menuUserMangement);

        menuFileManagement.setText("File Managment");

        menuItemLoadMedia.setText("Load Media");
        menuItemLoadMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadMediaActionPerformed(evt);
            }
        });
        menuFileManagement.add(menuItemLoadMedia);

        menuItemSaveMedia.setText("Save Media");
        menuItemSaveMedia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveMediaActionPerformed(evt);
            }
        });
        menuFileManagement.add(menuItemSaveMedia);

        menuBar.add(menuFileManagement);

        menuSortMyMedia.setText("Sort My Media");

        menuItemByTitle.setText("By Title");
        menuItemByTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemByTitleActionPerformed(evt);
            }
        });
        menuSortMyMedia.add(menuItemByTitle);

        menuItemByCost.setText("By Cost");
        menuItemByCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemByCostActionPerformed(evt);
            }
        });
        menuSortMyMedia.add(menuItemByCost);

        menuItemByDuration.setText("By Duration");
        menuItemByDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemByDurationActionPerformed(evt);
            }
        });
        menuSortMyMedia.add(menuItemByDuration);

        menuBar.add(menuSortMyMedia);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelMyMedia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCurrentPlaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelCurrentPlaylist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
            .addComponent(panelMyMedia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //-------------------------------------------------------------------------------- ACTION PERFORMED METHODS --------------------------------------------------------------------------------
	
    /**
     * Method to begin the process of closing the window
     */
    private void closeWindowActionPerformed() {
        String exitMessage = "Are you sure you really want to exit?";
        //Storing an exit message for use with the JOptionPane
        int userExit = JOptionPane.showConfirmDialog(null, exitMessage, "Are You Sure?", JOptionPane.YES_NO_OPTION);
        //Using a showConfirmDialog to get the user's input

        if (userExit == JOptionPane.YES_OPTION) {
            dispose();
            //Closing the window if the user clicks yes
            //System.out.println("User clicked yes");
            //Testing the if statement
        }
        
        //System.out.println(userExit);
        //Testing the user's result
        
    }
    
    //---------------------------------------- MENU BAR ----------------------------------------
	
    /**
    * Method to begin the user login process 
    * @param evt The action event generated when the user clicks on the Login menu item
    */ 
	private void menuItemLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoginActionPerformed
        
        //---------- GETTING THE INPUT FROM THE USER ----------
        
        String loginMessage = "Enter your username:";
        //Storing the message to display to the user
        String username = JOptionPane.showInputDialog(loginMessage);
        //Passing it into the input dialog
        //Also saving the input the user gives in a String variable
        
        //---------- VALIDATING THE USER INPUT ----------
       
        while (username.isEmpty())  {
            String usernameMessage = "Oops! You didn't enter anything. Please try again.";
            JOptionPane.showConfirmDialog(null,usernameMessage,"Username Error",JOptionPane.DEFAULT_OPTION);
            //Showing an alert to tell the user they haven't entered anything
            username = JOptionPane.showInputDialog(loginMessage);
            //Asking for it again
        }
        
        //---------- CREATING THE USER OBJECT ----------
        
        this.user = new User(username, 1000);
        //Creating a new user object with the username and giving them a default wallet balance of 1000p/£10.00
        //System.out.println(this.user.toString());
        //Testing the new user
                        
        //---------- UPDATING THE INTERFACE DISPLAYS ----------   
        
        interfaceLoggedIn();
        //Updating the interface to reflect the user being logged in
        initPlaylists();
        //Updating the playlists so they definitely have the latest user associated with them
        updatePlaylists();
        //Updating the playlists
        updateTextFields();
        //Updating the text fields
        updateRuntime();
        //Updating the runtime field
        
    }//GEN-LAST:event_menuItemLoginActionPerformed
	
    /**
    * Method to begin the user logout process 
    * @param evt The action event generated when the user clicks on the Logout menu item
    */ 
    private void menuItemLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLogoutActionPerformed
        
        //---------- RESETTING THE USER AND PLAYLISTS -----
        
        initUser();
        initPlaylists();
        //Reinitialising the user and playlists fields so they are default/empty
        updateTextFields();
        updatePlaylists();
        //Updating the JTextFields, the JComboBox and the JList
        updateRuntime();
        //Updating the runtime field
        
    }//GEN-LAST:event_menuItemLogoutActionPerformed

    /**
    * Method to begin the media management process 
    * @param evt The action event generated when the user clicks on the Manage Media menu item
    */ 
    private void menuItemManageMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemManageMediaActionPerformed
        
        //---------- PREPARING AND OPENING THE DIALOG ----------
        
        Object[] options = {"Top Up Wallet", "Withdraw From Wallet", "Cancel"};
        //Setting up the custom options for the showOptionDialog
        int userChoice = JOptionPane.showOptionDialog(this, "How would you like to manage your media?", "Manage Media", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[2]);
        //Displaying the showOptionDialog
        //Buttons work in the same way as YES/NO/CANCEL would i.e. return 0, 1 or 2
        //System.out.println(userChoice);
        //Testing what userChoice holds
        
        //---------- DEALING WITH THE RESULT FROM THE DIALOG ----------
        
        switch (userChoice) {
            case 0:
                topUpWallet();
                //Calling the method to top up the user's wallet
                break;
            case 1:
                withdrawFromWallet();
                //Calling the method to withdraw from the user's wallet
                break;
            default:
                //CANCEL is already handled by the JOptionPane.YES_NO_CANCEL_OPTION constant
                break;
        }
        
    }//GEN-LAST:event_menuItemManageMediaActionPerformed
	
	/**
	* Method to begin the media loading process 
	* @param evt The action event generated when the user clicks on the Load Media menu item
	*/
	private void menuItemLoadMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemLoadMediaActionPerformed
        
        //---------- USER CHOOSING A FILE TO LOAD & LOADING THE FILE ----------

        switch(fileChooser.showOpenDialog(this)) {
        //Creating a switch statement based on the int .showOpenDialog returns
            case JFileChooser.APPROVE_OPTION:
                File userFile = fileChooser.getSelectedFile();
                //Storing the chosen file
                //System.out.println("User clicked open.");
                //System.out.println("Absolute path: " + userFile.getAbsolutePath());
                //System.out.println("Absolute path: " + userFile.getName());
                //Displaying the properties of the file to ensure the right one is picked
                this.myMedia.readFromFile(userFile);
                //Passing the file to the readFromFile method in the myMedia playlist
                break;
            case JFileChooser.CANCEL_OPTION:
                //System.out.println("User cancelled.");
                break;
                //When the user cancels/closes the window
            case JFileChooser.ERROR_OPTION:
                //System.out.println("Error occurred.");
                break;
                //When an error occurs
        }
        
        //---------- CHECKING THE PLAYLIST HAS THE ITEMS ----------
        
        //System.out.println(this.myMedia.getNumItems());
        //Checking how many items are now in the myMedia playlist
        
        //for (int i = 0; i < this.myMedia.getNumItems(); i++) {
            //System.out.println(this.myMedia.getItems().get(i).getTitle());   
            //Going through the myMedia items ArrayList to get all the titles
            //Displaying them
        //}
        
        //---------- UPDATING THE INTERFACE ----------
        
        updateTextFields();
        //Updating the text fields
        updatePlaylists();
        //Updating the playlists
        //The playing playlist/the JList won't feature any changes
        
    }//GEN-LAST:event_menuItemLoadMediaActionPerformed

    /**
    * Method to begin the save media process 
    * @param evt The action event generated when the user clicks on the Save Media menu item
    */
    private void menuItemSaveMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveMediaActionPerformed
       
        //---------- USER CHOOSING A FILENAME TO SAVE TO & SAVING TO THE FILE ----------

        switch(fileChooser.showSaveDialog(this)) {
        //Creating a switch statement based on the int .showSaveDialog returns
            case JFileChooser.APPROVE_OPTION:
                File userFile = fileChooser.getSelectedFile();
                //Storing the chosen file
                //System.out.println("User clicked save.");
                //System.out.println("Absolute path: " + userFile.getAbsolutePath());
                //System.out.println("Absolute path: " + userFile.getName());
                //Displaying the properties of the file to ensure the right one is picked
                this.myMedia.saveToFile(userFile);
                //Passing the file to the saveToFile method in the myMedia playlist
                break;
            case JFileChooser.CANCEL_OPTION:
                //System.out.println("User cancelled.");
                break;
                //When the user cancels/closes the window
            case JFileChooser.ERROR_OPTION:
                //System.out.println("Error occurred.");
                break;
                //When an error occurs
        }
        
        //---------- NO NEED TO UPDATE INTERFACE ----------
        
    }//GEN-LAST:event_menuItemSaveMediaActionPerformed

    /**
    * Method to begin the sorting process 
    * @param evt The action event generated when the user clicks on the By Title menu item
    */
    private void menuItemByTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemByTitleActionPerformed
        
        //---------- SORTING THE CURRENT PLAYLIST ----------
        
        if (this.playing.getNumItems() > 0) {
            this.playing.sortItemsByTitle();
            //Using playing's inner method which it has as an instance of the PlayList class
        }
                
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        //Calling the method to update the interface
        
    }//GEN-LAST:event_menuItemByTitleActionPerformed
	
	/**
	* Method to begin the sorting process 
	* @param evt The action event generated when the user clicks on the By Cost menu item
	*/
	private void menuItemByCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemByCostActionPerformed
        
        //---------- SORTING THE CURRENT PLAYLIST ----------
        
        if (this.playing.getNumItems() > 0) {
            this.playing.sortItemsByCost();
            //Using playing's inner method which it has as an instance of the PlayList class
        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        //Calling the method to update the interface
        
    }//GEN-LAST:event_menuItemByCostActionPerformed

    /**
    * Method to begin the sorting process 
    * @param evt The action event generated when the user clicks on the By Duration menu item
    */
    private void menuItemByDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemByDurationActionPerformed
        
        //---------- SORTING THE CURRENT PLAYLIST ----------
        
        if (this.playing.getNumItems() > 0) {
            this.playing.sortItemsByDuration();
            //Using playing's inner method which it has as an instance of the PlayList class
        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        //Calling the method to update the interface
        
    }//GEN-LAST:event_menuItemByDurationActionPerformed

    //---------------------------------------- MY MEDIA PANEL ----------------------------------------

    /**
    * Method to move the selected item from the JComboBox into the JList 
    * @param evt The action event generated when the user selects an item in the JComboBox
    */
    private void comboBoxMyMediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMyMediaActionPerformed
        
        //---------- PREPARING THE CURRENT ITEM ----------
        
        Media selectedItem = (Media) comboBoxMyMedia.getSelectedItem();
        //Getting the selected item from the combo box
        
        //---------- ADDING IT TO THE JLIST ----------
        
        this.playing.addFreeMedia(selectedItem);
        //Passing the Media item to the items ArrayList in the playing object
        //Using the addLoadedMedia method as it bypasses the purchasing concept
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        //Updating the playlists i.e. reflecting the changes on the interface
        updateRuntime();
        //Updating the runtime field
        
    }//GEN-LAST:event_comboBoxMyMediaActionPerformed

    /**
    * Method to add a new episode/Series (Media subclass) item to the JComboBox/ArrayList in the myMedia PlayList object 
    * @param evt The action event generated when the user clicks on the Add Episode Button
    */
    private void buttonAddEpisodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddEpisodeActionPerformed
        
    //---------- PREPARING THE JOPTIONPANE ----------
        
        JTextField title = new JTextField();
        JTextField duration = new JTextField();
        JTextField age = new JTextField();
        JTextField episode = new JTextField();
        JTextField episodeTitle = new JTextField();
        //Creating text fields to get the details from the user
        
        JPanel episodeInputPanel = new JPanel();
        //Creating the panel to store all of the text fields
        GridLayout episodeInputLayout = new GridLayout(5,1);
        episodeInputPanel.setLayout(episodeInputLayout);
        //Creating a GridLayout for the panel
        episodeInputPanel.add(new JLabel("Show Title: "));
        episodeInputPanel.add(title);
        episodeInputPanel.add(Box.createHorizontalStrut(15));
        episodeInputPanel.add(new JLabel("Episode Duration in Seconds: "));
        episodeInputPanel.add(duration);
        episodeInputPanel.add(Box.createHorizontalStrut(15));
        episodeInputPanel.add(new JLabel("Age Restriction: "));
        episodeInputPanel.add(age);
        episodeInputPanel.add(Box.createHorizontalStrut(15));
        episodeInputPanel.add(new JLabel("Episode Number: "));
        episodeInputPanel.add(episode);
        episodeInputPanel.add(Box.createHorizontalStrut(15));
        episodeInputPanel.add(new JLabel("Episode Title: "));
        episodeInputPanel.add(episodeTitle);
        //Adding the text fields and additional JLabels to the panel
        
        //---------- GETTING THE USER'S INPUT ----------
                
        String addEpisodeMessage = "Please enter the following details about this episode: ";
        int userChoice = JOptionPane.showConfirmDialog(null, episodeInputPanel, addEpisodeMessage, JOptionPane.OK_CANCEL_OPTION);
        //Creating the JOptionPane in the form of a showConfirmDialog
        //Saving the result of the user's choice in an int variable
        if (userChoice == JOptionPane.OK_OPTION) {
            
            //---------- VALIDATING THE USER'S INPUT ----------
            
            if ((title.getText().isEmpty() == true) || (duration.getText().isEmpty() == true) || (age.getText().isEmpty() == true) || (episode.getText().isEmpty() == true) || (episodeTitle.getText().isEmpty() == true)) {
                String missingEpisodeDetails = "Sorry, but you didn't enter all the details for the episode so it couldn't be added.";
                JOptionPane.showConfirmDialog(null,missingEpisodeDetails,"Episode Details Error",JOptionPane.DEFAULT_OPTION);
                //Showing an alert to tell the user they haven't entered anything
            } else if (((duration.getText().matches("[0-9]+") == false) || (age.getText().matches("[0-9]+") == false) || (episode.getText().matches("[0-9]+") == false)) || ((Integer.parseInt(duration.getText()) == 0) || (Integer.parseInt(age.getText()) == 0) || (Integer.parseInt(episode.getText()) == 0))) {
                String wrongEpisodeDetails = "Sorry, but you didn't enter the details for the episode duration/age registriction/episode number correctly so it couldn't be added." + "\n" + "Please enter only numerical characters and a value above 0.";
                JOptionPane.showConfirmDialog(null,wrongEpisodeDetails,"Episode Details Error",JOptionPane.DEFAULT_OPTION);
                //Showing an alert to tell the user they haven't entered accepted data
            } else {
                String titleText = title.getText();
                int durationText = Integer.parseInt(duration.getText());
                int ageText = Integer.parseInt(age.getText());
                int episodeText = Integer.parseInt(episode.getText());
                String episodeTitleText = episodeTitle.getText();
                //Creating and initialising variables to store the text from the text fields

                Series s = new Series(titleText, durationText, ageText, episodeText, episodeTitleText);           
                //Creating a Series object to add to the combo box
                this.myMedia.addMedia(s);
                //Adding it to the myMedia playlist
            }
            
        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        updateTextFields();
        //Calling the helper methods
        
    }//GEN-LAST:event_buttonAddEpisodeActionPerformed
	
	/**
	* Method to add a new Film (Media subclass) item to the JComboBox/ArrayList in the myMedia PlayList object 
	* @param evt The action event generated when the user clicks on the Add Film Button
	*/
	private void buttonAddFilmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddFilmActionPerformed
        
        //---------- PREPARING THE JOPTIONPANE ----------
        
        JTextField title = new JTextField();
        JTextField duration = new JTextField();
        JTextField age = new JTextField();
        JTextField director = new JTextField();
        //Creating text fields to get the details from the user
        
        JPanel filmInputPanel = new JPanel();
        //Creating the panel to store all of the text fields
        GridLayout filmInputLayout = new GridLayout(4,1);
        filmInputPanel.setLayout(filmInputLayout);
        //Creating a GridLayout for the panel
        filmInputPanel.add(new JLabel("Film Title: "));
        filmInputPanel.add(title);
        filmInputPanel.add(Box.createHorizontalStrut(15));
        filmInputPanel.add(new JLabel("Film Duration in Seconds: "));
        filmInputPanel.add(duration);
        filmInputPanel.add(Box.createHorizontalStrut(15));
        filmInputPanel.add(new JLabel("Age Restriction: "));
        filmInputPanel.add(age);
        filmInputPanel.add(Box.createHorizontalStrut(15));
        filmInputPanel.add(new JLabel("Director's Name: "));
        filmInputPanel.add(director);
        //Adding the text fields and additional JLabels to the panel
        
        //---------- GETTING THE USER'S INPUT ----------
                
        String addFilmMessage = "Please enter the following details about this film: ";
        int userChoice = JOptionPane.showConfirmDialog(null, filmInputPanel, addFilmMessage, JOptionPane.OK_CANCEL_OPTION);
        //Creating the JOptionPane in the form of a showConfirmDialog
        //Saving the result of the user's choice in an int variable
        if (userChoice == JOptionPane.OK_OPTION) {
            
            //---------- VALIDATING THE USER'S INPUT ----------
            
            if ((title.getText().isEmpty() == true) || (duration.getText().isEmpty() == true) || (age.getText().isEmpty() == true) || (director.getText().isEmpty() == true)) {
                String missingFilmDetails = "Sorry, but you didn't enter all the details for the film so it couldn't be added.";
                JOptionPane.showConfirmDialog(null,missingFilmDetails,"Film Details Error",JOptionPane.DEFAULT_OPTION);
                //Showing an alert to tell the user they haven't entered anything
            } else if (((duration.getText().matches("[0-9]+") == false) || (age.getText().matches("[0-9]+") == false)) || ((Integer.parseInt(duration.getText()) == 0) || (Integer.parseInt(age.getText()) == 0))) {
                String wrongFilmDetails = "Sorry, but you didn't enter the details for the film duration/age registriction correctly so it couldn't be added." + "\n" + "Please enter only numerical characters and a value above 0.";
                JOptionPane.showConfirmDialog(null,wrongFilmDetails,"Film Details Error",JOptionPane.DEFAULT_OPTION);
                //Showing an alert to tell the user they haven't entered accepted data
            } else {
                String titleText = title.getText();
                int durationText = Integer.parseInt(duration.getText());
                int ageText = Integer.parseInt(age.getText());
                String directorText = director.getText();
                //Creating and initialising variables to store the text from the text fields

                Film f = new Film(titleText, durationText, ageText, directorText);           
                //Creating a Film object to add to the combo box
                this.myMedia.addMedia(f);
                //Adding it to the myMedia playlist
            }
            
        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        updateTextFields();
        //Calling the helper methods
        
    }//GEN-LAST:event_buttonAddFilmActionPerformed

    /**
    * Method to add a new Music (Media subclass) item to the JComboBox/ArrayList in the myMedia PlayList object 
    * @param evt The action event generated when the user clicks on the Add Music Button
    */
    private void buttonAddMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddMusicActionPerformed
        
        //---------- PREPARING THE JOPTIONPANE ----------
        
        JTextField title = new JTextField();
        JTextField duration = new JTextField();
        JTextField artist = new JTextField();
        //Creating text fields to get the details from the user
        
        JPanel musicInputPanel = new JPanel();
        //Creating the panel to store all of the text fields
        GridLayout musicInputLayout = new GridLayout(3,1);
        musicInputPanel.setLayout(musicInputLayout);
        //Creating a GridLayout for the panel
        musicInputPanel.add(new JLabel("Film Title: "));
        musicInputPanel.add(title);
        musicInputPanel.add(Box.createHorizontalStrut(15));
        musicInputPanel.add(new JLabel("Film Duration in Seconds: "));
        musicInputPanel.add(duration);
        musicInputPanel.add(Box.createHorizontalStrut(15));
        musicInputPanel.add(new JLabel("Age Restriction: "));
        musicInputPanel.add(artist);
        //Adding the text fields and additional JLabels to the panel
        
        //---------- GETTING THE USER'S INPUT ----------
                
        String addMusicMessage = "Please enter the following details about this song: ";
        int userChoice = JOptionPane.showConfirmDialog(null, musicInputPanel, addMusicMessage, JOptionPane.OK_CANCEL_OPTION);
        //Creating the JOptionPane in the form of a showConfirmDialog
        //Saving the result of the user's choice in an int variable
        if (userChoice == JOptionPane.OK_OPTION) {
            
            //---------- VALIDATING THE USER'S INPUT ----------
            
            if ((title.getText().isEmpty() == true) || (duration.getText().isEmpty() == true) || (artist.getText().isEmpty() == true)) {
                String missingMusicDetails = "Sorry, but you didn't enter all the details for the song so it couldn't be added.";
                JOptionPane.showConfirmDialog(null,missingMusicDetails,"Music Details Error",JOptionPane.DEFAULT_OPTION);
                //Showing an alert to tell the user they haven't entered anything
            } else if ((duration.getText().matches("[0-9]+") == false) || (Integer.parseInt(duration.getText()) == 0)) {
                String wrongSongDetails = "Sorry, but you didn't enter the details for the song duration correctly so it couldn't be added." + "\n" + "Please enter only numerical characters and a value above 0.";
                JOptionPane.showConfirmDialog(null,wrongSongDetails,"Song Details Error",JOptionPane.DEFAULT_OPTION);
                //Showing an alert to tell the user they haven't entered accepted data
            } else {
                String titleText = title.getText();
                int durationText = Integer.parseInt(duration.getText());
                String artistText = artist.getText();
                //Creating and initialising variables to store the text from the text fields

                Music m = new Music(titleText, durationText, artistText);           
                //Creating a Music object to add to the combo box
                this.myMedia.addMedia(m);
                //Adding it to the myMedia playlist
            }
            
        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        updateTextFields();
        //Calling the helper methods
        
    }//GEN-LAST:event_buttonAddMusicActionPerformed

    //---------------------------------------- CURRENT PLAYLIST PANEL ----------------------------------------

    /**
    * Method to update the index of the currently selected item in the JList
    * @param evt The action event generated when the user selects an item in the JList
    */
	private void listCurrentPlaylistValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCurrentPlaylistValueChanged
        
        //---------- GETTING THE CURRENT ITEM ----------
        this.currentItemIndex = listCurrentPlaylist.getSelectedIndex();
        
        //---------- UPDATING THE INTERFACE ----------
        if (currentItemIndex > -1) {
            updateImage();
            //If an item is selected then its image is displayed on the interface
        }
                
    }//GEN-LAST:event_listCurrentPlaylistValueChanged
		
    /**
    * Method to give the selected item in the JList an associated image file name 
    * @param evt The action event generated when the user clicks on the Add Image Button
    */	
    private void buttonAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddImageActionPerformed
        
        if (currentItemIndex > -1) {
            
            //---------- USER CHOOSING A FILE TO LOAD & LOADING THE FILE ----------

            switch(fileChooser.showOpenDialog(this)) {
            //Creating a switch statement based on the int .showOpenDialog returns
                case JFileChooser.APPROVE_OPTION:
                    File userFile = fileChooser.getSelectedFile();
                    //Storing the chosen file
                    //System.out.println("User clicked open.");
                    //System.out.println("Absolute path: " + userFile.getAbsolutePath());
                    //System.out.println("Absolute path: " + userFile.getName());
                    //Displaying the properties of the file to ensure the right one is picked
                    String imageFileName = userFile.getAbsolutePath();
                    //Storing the file's name and path
                    this.playing.getMedia(currentItemIndex).setImageFileName(imageFileName);
                    //Giving it to the media item
                    updateImage();
                    //Updating the interface
                    break;
                case JFileChooser.CANCEL_OPTION:
                    //System.out.println("User cancelled.");
                    break;
                    //When the user cancels/closes the window
                case JFileChooser.ERROR_OPTION:
                    //System.out.println("Error occurred.");
                    break;
                    //When an error occurs
            }
            
        }
                
    }//GEN-LAST:event_buttonAddImageActionPerformed
	
    /**
    * Method to move the currently selected item in the JList up by one position 
    * @param evt The action event generated when the user clicks on the Move Up Button
    */
	private void buttonMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMoveUpActionPerformed
           
        if (currentItemIndex > -1) {
        
            //---------- MOVING THE ITEM UP ----------
            
            int currentItem = listCurrentPlaylist.getSelectedIndex();
            //Getting the selected index
            if (currentItem > 0) {
                int nextIndex = currentItem - 1;
                //Preparing the next index
                this.playing.moveMedia(nextIndex, currentItem);
                //Passing the indexes through the moveMedia method
            }
        
        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        //Calling the helper method
        
    }//GEN-LAST:event_buttonMoveUpActionPerformed

    /**
    * Method to move the currently selected item in the JList down by one position 
    * @param evt The action event generated when the user clicks on the Move Down Button
    */
    private void buttonMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMoveDownActionPerformed
        
        if (currentItemIndex > -1) {
        
            //---------- MOVING THE ITEM DOWN ----------

            int currentItem = listCurrentPlaylist.getSelectedIndex();
            //Getting the selected index
            if (currentItem < this.playing.getNumItems() - 1) {
                int nextIndex = currentItem + 1;
                //Preparing the next index
                this.playing.moveMedia(currentItem, nextIndex);
                //Passing the indexes through the moveMedia method
            }
        
        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        //Calling the helper method
        
    }//GEN-LAST:event_buttonMoveDownActionPerformed

    /**
    * Method to remove the currently selected item from the JList 
    * @param evt The action event generated when the user clicks on the Remove Button
    */
    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
        
        if (currentItemIndex > -1) {
        
            //---------- REMOVING THE ITEM ----------

            int currentItem = listCurrentPlaylist.getSelectedIndex();
            //Getting the selected index
            this.playing.removeMedia(currentItem);
            //Passing the indexes through the removeMedia method

        }
        
        //---------- UPDATING THE INTERFACE ----------
        
        updatePlaylists();
        updateRuntime();
        //Calling the helper methods
        
    }//GEN-LAST:event_buttonRemoveActionPerformed

    /**
    * Method to randomly shuffle the order of the items currently in the JList
    * @param evt The action event generated when the user clicks on the Shuffle Button
    */
    private void buttonShuffleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShuffleActionPerformed
        
        if (currentItemIndex > -1) {
        
            //---------- SHUFFLING THE CURRENT PLAYLIST ----------

            Collections.shuffle(this.playing.getItems());
            //Shuffling the playlist
        
        }
        
        //---------- UPDATING THE INTERFACE ---------
        
        updatePlaylists();
        //Calling the helper method
        
    }//GEN-LAST:event_buttonShuffleActionPerformed

    //-------------------------------------------------------------------------------- END OF ACTION PERFORMED METHODS --------------------------------------------------------------------------------

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MediaPlayListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MediaPlayListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MediaPlayListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MediaPlayListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MediaPlayListGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddEpisode;
    private javax.swing.JButton buttonAddFilm;
    private javax.swing.JButton buttonAddImage;
    private javax.swing.JButton buttonAddMusic;
    private javax.swing.JButton buttonMoveDown;
    private javax.swing.JButton buttonMoveUp;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JButton buttonShuffle;
    private javax.swing.JComboBox<String> comboBoxMyMedia;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labelCurrentPlaylist;
    private javax.swing.JLabel labelCurrentPlaylistButtons;
    private javax.swing.JLabel labelMediaImage;
    private javax.swing.JLabel labelMyMedia;
    private javax.swing.JLabel labelMyMediaButtons;
    private javax.swing.JLabel labelMyMediaDropDown;
    private javax.swing.JLabel labelTotalRuntime;
    private javax.swing.JLabel labelWelcomeBack;
    private javax.swing.JLabel labelYourCurrentBalance;
    private javax.swing.JList<String> listCurrentPlaylist;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuFileManagement;
    private javax.swing.JMenuItem menuItemByCost;
    private javax.swing.JMenuItem menuItemByDuration;
    private javax.swing.JMenuItem menuItemByTitle;
    private javax.swing.JMenuItem menuItemLoadMedia;
    private javax.swing.JMenuItem menuItemLogin;
    private javax.swing.JMenuItem menuItemLogout;
    private javax.swing.JMenuItem menuItemManageMedia;
    private javax.swing.JMenuItem menuItemSaveMedia;
    private javax.swing.JMenu menuSortMyMedia;
    private javax.swing.JMenu menuUserMangement;
    private javax.swing.JPanel panelCurrentPlaylist;
    private javax.swing.JPanel panelMyMedia;
    private javax.swing.JScrollPane scrollPaneListHolder;
    private javax.swing.JTextField textFieldTotalRuntime;
    private javax.swing.JTextField textFieldUsername;
    private javax.swing.JTextField textFieldYourCurrentBalance;
    // End of variables declaration//GEN-END:variables

    //-------------------------------------------------------------------------------- HELPER METHODS --------------------------------------------------------------------------------
	    
    //---------------------------------------- INITIALISATION METHODS ----------------------------------------
	
    /**
     * Method to initialise the user field with a blank User object
     */
    private void initUser() {
        this.user = new User("",0);
        //No username and an empty wallet
        //System.out.println("Username: " + this.user.getUsername());
        //System.out.println("Wallet balance in pence: " + this.user.getWallet());
        //Testing
        interfaceLoggedOut();
        //Updating the interface to reflect the user being logged out
    }
    
    /**
     * Method to initialise the myMedia and playing PlayList objects
     */
    private void initPlaylists() {
        this.myMedia = new PlayList(this.user);
        this.playing = new PlayList(this.user);
        //Passing through the user field to link the playlists to whichever user is logged in
        //System.out.println(this.myMedia.getUser().toString());
        //System.out.println(this.myMedia.toString());
        //Testing myMedia
        //System.out.println(this.playing.getUser().toString());
        //System.out.println(this.playing.toString());
        //Testing playing
    }
    
    /**
     * Method to close the JFrame window if the user is sure
     */
    
    //---------------------------------------- UPDATE INTERFACE METHODS ----------------------------------------
	
    /**
     * Method to update the interface to reflect no user being logged in
     * i.e. Functionality is limited to logging in and closing the program
     */
    private void interfaceLoggedOut() {
        
        //---------- STARTING WITH THE MENUS ----------
        
        menuItemLogout.setEnabled(false);
        menuItemManageMedia.setEnabled(false);
        //User Management is left enabled as it is required to access the Login item
        menuItemLogin.setEnabled(true);
        //And Login is enabled
        menuFileManagement.setEnabled(false);
        menuSortMyMedia.setEnabled(false);
        //The rest of the menus are disabled rather than their individual menu items
        
        //---------- MOVING ONTO MY MEDIA PANEL ----------
        
        comboBoxMyMedia.setEnabled(false);
        buttonAddEpisode.setEnabled(false);
        buttonAddFilm.setEnabled(false);
        buttonAddMusic.setEnabled(false);
        
        //---------- COMPLETING TASK WITH CURRENT PLAYLIST PANEL ----------
        
        buttonAddImage.setEnabled(false);
        buttonMoveUp.setEnabled(false);
        buttonMoveDown.setEnabled(false);
        buttonShuffle.setEnabled(false);
        buttonRemove.setEnabled(false);
        listCurrentPlaylist.setEnabled(false);
        scrollPaneListHolder.setEnabled(false);
        
    }
    
    /**
     * Method to update the interface to reflect the user now being logged in
     * i.e. Functionality is updated to all except logging in 
     */
    private void interfaceLoggedIn() {
        
        //---------- STARTING WITH THE MENUS ----------
        
        menuItemLogout.setEnabled(true);
        menuItemManageMedia.setEnabled(true);
        //Remaining items of User Management are enabled 
        menuItemLogin.setEnabled(false);
        //And Login is disabled
        menuFileManagement.setEnabled(true);
        menuSortMyMedia.setEnabled(true);
        //The rest of the menus are disabled rather than their individual menu items
        
        //---------- MOVING ONTO MY MEDIA PANEL ----------
        
        comboBoxMyMedia.setEnabled(true);
        buttonAddEpisode.setEnabled(true);
        buttonAddFilm.setEnabled(true);
        buttonAddMusic.setEnabled(true);
        
        //---------- COMPLETING TASK WITH CURRENT PLAYLIST PANEL ----------
        
        buttonAddImage.setEnabled(true);
        buttonMoveUp.setEnabled(true);
        buttonMoveDown.setEnabled(true);
        buttonShuffle.setEnabled(true);
        buttonRemove.setEnabled(true);
        listCurrentPlaylist.setEnabled(true);
        scrollPaneListHolder.setEnabled(true);
        
    }
    
    /**
     * Method to update the JTextFields storing the username of the user currently logged in and their current wallet balance
     */
    private void updateTextFields() {
        
        //---------- USERNAME ----------
        
        textFieldUsername.setText(user.getUsername());
        //Updating the username text field
        
        //---------- CURRENT BALANCE ----------
        
        textFieldYourCurrentBalance.setText("£" + String.format("%.2f", (double)user.getWallet() / 100));
        //Updating the current balance text field
    }
	
    /**
     * Method to update the playlist displays for the myMedia and playlist objects
     */
    private void updatePlaylists() {
        
        //---------- MYMEDIA ----------
        
        comboBoxMyMedia.setModel(new DefaultComboBoxModel(this.myMedia.getItems().toArray()));
        //Setting the model of the JComboBox using a new DefaultComboBoxModel
        //Also using the ArrayList of items in the myMedia object converted to an array
        
        //---------- PLAYING ----------
        
        listCurrentPlaylist.setModel(new DefaultComboBoxModel(this.playing.getItems().toArray()));
        //Setting the model of the JList using a new DefaultComboBoxModel
        //Also using the ArrayList of items in the playing object converted to an array
        
    }
    
    /**
     * Method to update the JTextField displaying the current playlist's total runtime
     */
    private void updateRuntime() {
        
        //---------- GETTING THE TOTAL DURATION ----------
        
        int secs = this.playing.getTotalDuration();
        //Getting the total duration
        int mins = 0;
        int hours = 0;
        //Declaring variables to store the remaining sections of the runtime
        
        //System.out.println(secs);
        //System.out.println(mins);
        //System.out.println(hours);
        //Testing secs, mins and hours
        
        //---------- CALCULATING THE SECTIONS ----------
        
        if (secs > 59) {
            mins = secs / 60;
            //Whole minutes are found by dividing amount of seconds by 60
            secs = secs % 60;
            //Remaining seconds are found by using the modulus function
            //System.out.println("secs was above 59");
            //Testing the if statement condition
        }
        
        if (mins > 59) {
            hours = mins / 60;
            //Whole hours are found by dividing amount of minutes by 60
            mins = mins % 60;
            //Remaining minutes are found by using the modulus function
            //System.out.println("mins was above 59");
            //Testing the if statement condition
        }
        
        //System.out.println(secs);
        //System.out.println(mins);
        //System.out.println(hours);
        //Testing secs, mins and hours
        
        //---------- FORMATTING THE OUTPUT ----------
        
        String output = "";
        //Declaring an empty String to store the output
        if (hours < 10) {
            output += "0" + hours + ":";
        } else {
            output += hours + ":";
        }
        //Formatting hours
        //System.out.println(output);
        //Checking the output
        
        if (mins < 10) {
            output += "0" + mins + ":";
        } else {
            output += mins + ":";
        }
        //Formatting minutes
        //System.out.println(output);
        //Checking the output
        
        if (secs < 10) {
            output += "0" + secs;
        } else {
            output += secs;
        }
        //Formatting seconds
        //System.out.println(output);
        //Checking the output
        
        //---------- UPDATING THE INTERFACE ----------
        
        textFieldTotalRuntime.setText(output);
        //Setting the textbox to hold the formatted output
        
    }
    
    /**
     * Method to update the interface to show the new image
     */
    private void updateImage() {
        
        if (currentItemIndex > -1) {
            
            String fileName = this.playing.getMedia(currentItemIndex).getImageFileName();
            //Getting the file name
            if (fileName.equals("") == false) {
                labelMediaImage.setText("");
                labelMediaImage.setIcon(new ImageIcon(fileName));
                //Creating a new ImageIcon and setting the JLabel to display it
            } else {
                labelMediaImage.setText("No image found");
                labelMediaImage.setIcon(null);
                //If the imageFileName attribute is still empty, the "No image found" message is displayed
            }
            
        } else {
            labelMediaImage.setText("No image found");
            labelMediaImage.setIcon(null);
            //If no item is selected, the "No image found" message is displayed
        }
        
    }
    
	//---------------------------------------- WALLET METHODS ----------------------------------------
	
    /**
     * Method to top up the user's wallet
     */
    private void topUpWallet() {
        
        //---------- GETTING THE INPUT FROM THE USER ----------
        
        String topUpMessage = "Enter the amount (in pence) you wish to add to your wallet - remember, each £ = 100p:";
        //Storing the message to display to the user
        String topUpAmount = JOptionPane.showInputDialog(topUpMessage);
        //Passing it into the input dialog
        //Also saving the input the user gives in a String variable
        //System.out.println(topUpAmount);
        //Testing the input 
        
        //---------- VALIDATING THE INPUT ----------
        
        while (!(topUpAmount.matches("[0-9]+"))) {
        //Checking to see if the input entered contains only numerical characters
            topUpMessage = "Your amount must contain only numbers." + "\n" + "Enter the amount (in pence) you wish to add to your wallet - remember, each £ = 100p:";
            //Updating the message to display to the user
            topUpAmount = JOptionPane.showInputDialog(topUpMessage);
            //Passing it into the input dialog
            //Also saving the input the user gives in a String variable
        }
        //System.out.println(topUpAmount);
        //Testing the input 
        
        //---------- TOPPING UP THE USER'S WALLET ----------
        
        int amount = Integer.parseInt(topUpAmount);
        //Converting the String into an integer
        this.user.topUp(amount);
        //Using the user topUp method to add the amount to the wallet
        
        //---------- UPDATING THE INTERFACE ----------
        
        updateTextFields();
        //Updating the JTextFields to reflect the change
        
    }
    
    /**
     * Method to withdraw from the user's wallet
     */
    private void withdrawFromWallet() {
        
        //---------- GETTING THE INPUT FROM THE USER ----------
        
        String withdrawMessage = "Enter the amount (in pence) you wish to withdraw from your wallet - remember, each £ = 100p:";
        //Storing the message to display to the user
        String withdrawAmount = JOptionPane.showInputDialog(withdrawMessage);
        //Passing it into the input dialog
        //Also saving the input the user gives in a String variable
        
        //---------- VALIDATING THE INPUT ----------
        
        while ((!(withdrawAmount.matches("[0-9]+"))) || (Integer.parseInt(withdrawAmount) > this.user.getWallet())) {
        //Checking to see if the input entered contains only numerical characters and if it's within the accepted limit
            withdrawMessage = "Your amount must contain only numbers and not be more than what you have in your wallet." + "\n" + "Enter the amount (in pence) you wish to add to your wallet - remember, each £ = 100p:";
            //Updating the message to display to the user
            withdrawAmount = JOptionPane.showInputDialog(withdrawMessage);
            //Passing it into the input dialog
            //Also saving the input the user gives in a String variable
        }
        
        //---------- TOPPING UP THE USER'S WALLET ----------
        
        int amount = Integer.parseInt(withdrawAmount);
        //Converting the String into an integer
        amount = amount * (-1);
        //Turning the amount negative
        this.user.topUp(amount);
        //Using the user topUp method to remove the amount from the wallet
        
        //---------- UPDATING THE INTERFACE ----------
        
        updateTextFields();
        //Updating the JTextFields to reflect the change
        
    }
	
	//-------------------------------------------------------------------------------- END OF HELPER METHODS --------------------------------------------------------------------------------
	
}
